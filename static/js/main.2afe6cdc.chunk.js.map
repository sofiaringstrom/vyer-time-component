{"version":3,"sources":["components/Time.jsx","App.js","serviceWorker.js","index.js"],"names":["Time","props","state","currentTime","Date","getTime","currentTimeDynamic","this","intervalID","setInterval","tick","clearInterval","setState","diffDuration","days","toString","replace","hours","minutes","seconds","targetTimeMoment","moment","targetTime","timeDiff","fromNow","currentTimeMoment","dynamic","diff","duration","diffWithTime","_getDiffWithTime","id","includeTime","Component","App","today","toISOString","split","time","todayTime","className","noValidate","TextField","label","type","InputProps","inputProps","max","value","onChange","e","target","Switch","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TA6EeA,E,kDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,aAAa,IAAIC,MAAOC,UACxBC,oBAAoB,IAAIF,MAAOC,WALhB,E,gEASE,IAAD,OAElBE,KAAKC,WAAaC,aAChB,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcJ,KAAKC,c,6BAKnBD,KAAKK,SAAS,CACZN,oBAAoB,IAAIF,MAAOC,c,uCAKlBQ,GACf,IAAIC,EAAOD,EAAaC,OAAOC,WAC/BD,EAAOA,EAAKE,QAAQ,IAAK,IAEzB,IAAIC,EAAQJ,EAAaI,QAAQF,WACjCE,EAAQA,EAAMD,QAAQ,IAAK,IAE3B,IAAIE,EAAUL,EAAaK,UAAUH,WACrCG,EAAUA,EAAQF,QAAQ,IAAK,IAE/B,IAAIG,EAAUN,EAAaM,UAAUJ,WAIrC,OAHAI,EAAUA,EAAQH,QAAQ,IAAK,IAEb,UAAMF,EAAN,kBAAoBG,EAApB,cAA+BC,EAA/B,iBAA+CC,EAA/C,W,+BAOlB,IAAMC,EAAmBC,IAAOd,KAAKN,MAAMqB,YAGrCC,EAAWH,EAAiBI,UAG5BC,EAAoBJ,IAAOd,KAAKN,MAAMyB,QAAUnB,KAAKL,MAAMI,mBAAqBC,KAAKL,MAAMC,aAG3FwB,EAAOP,EAAiBO,KAAKF,GAE7BZ,EAAeQ,IAAOO,SAASD,GAG/BE,EAAetB,KAAKuB,iBAAiBjB,GAE3C,OACE,yBAAKkB,GAAG,kBAAR,aACaxB,KAAKN,MAAM+B,YAAcH,EAAeN,O,GArExCU,a,gBCqEJC,E,kDA9Db,WAAYjC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IACMkC,GADO,IAAI/B,MACEgC,cAAcC,MAAM,KACjCC,EAAOH,EAAM,GAAGE,MAAM,KACtBE,EAAS,UAAMJ,EAAM,GAAZ,YAAkBG,EAAK,GAAvB,YAA6BA,EAAK,IANhC,OAQjB,EAAKpC,MAAQ,CACXqC,UAAWA,EACXjB,WAAY,mBACZU,aAAa,EACbN,SAAS,GAZM,E,qDAgBT,IAAD,OAEP,OACE,yBAAKc,UAAU,OACb,0BAAMC,YAAU,GACd,kBAACC,EAAA,EAAD,CACEX,GAAG,iBACHY,MAAM,OACNC,KAAK,iBACLC,WAAY,CAACC,WAAY,CAAEC,IAAKxC,KAAKL,MAAMqC,YAC3CS,MAAOzC,KAAKL,MAAMoB,WAClB2B,SAAU,SAAAC,GAAC,OAAI,EAAKtC,SAAS,CAACU,WAAY4B,EAAEC,OAAOH,YAIvD,oDACA,kBAACI,EAAA,EAAD,CACEC,QAAS9C,KAAKL,MAAMwB,QACpBuB,SAAU,SAAAC,GAAC,OAAI,EAAKtC,SAAS,CAACc,QAASwB,EAAEC,OAAOE,aAGlD,6BAEA,4CACA,kBAACD,EAAA,EAAD,CACEC,QAAS9C,KAAKL,MAAM8B,YACpBiB,SAAU,SAAAC,GAAC,OAAI,EAAKtC,SAAS,CAACoB,YAAakB,EAAEC,OAAOE,aAGtD,yBAAKtB,GAAG,gBACN,0DACA,8XAKF,kBAAC,EAAD,CACET,WAAYf,KAAKL,MAAMoB,WACvBU,YAAazB,KAAKL,MAAM8B,YACxBN,QAASnB,KAAKL,MAAMwB,e,GAzDZO,aCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2afe6cdc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\n\nclass Time extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currentTime: new Date().getTime(),\n      currentTimeDynamic: new Date().getTime()\n    }\n  }\n\n  componentDidMount() {\n    // Start counting at mount, not ideal but...\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  // Update current time\n  tick() {\n    this.setState({\n      currentTimeDynamic: new Date().getTime()\n    });\n  }\n\n  // Get formatted diff time with dd:hh:mm:ss\n  _getDiffWithTime(diffDuration) {\n    let days = diffDuration.days().toString()\n    days = days.replace('-', '')\n\n    let hours = diffDuration.hours().toString()\n    hours = hours.replace('-', '')\n\n    let minutes = diffDuration.minutes().toString()\n    minutes = minutes.replace('-', '')\n\n    let seconds = diffDuration.seconds().toString()\n    seconds = seconds.replace('-', '')\n\n    const diffWithTime = `${days} days, ${hours}h, ${minutes}m and ${seconds}s ago`\n    return diffWithTime\n  }\n\n  render() {\n\n    // Target time as moment object\n    const targetTimeMoment = moment(this.props.targetTime)\n\n    // Time with dd\n    const timeDiff = targetTimeMoment.fromNow()\n\n    // Current time either dynamic or static\n    const currentTimeMoment = moment(this.props.dynamic ? this.state.currentTimeDynamic : this.state.currentTime)\n    \n    // Time difference between target time and now\n    const diff = targetTimeMoment.diff(currentTimeMoment);\n    // Time duration difference between target and now\n    const diffDuration = moment.duration(diff);\n    \n    // Get time with dd:hh:mm:ss\n    const diffWithTime = this._getDiffWithTime(diffDuration)\n\n    return (\n      <div id=\"time-component\">\n        Published {this.props.includeTime ? diffWithTime : timeDiff}\n      </div>\n    )\n  }\n}\nexport default Time","import React, { Component } from 'react'\nimport './App.css';\nimport Time from './components/Time'\nimport { \n  TextField,\n  Switch\n} from '@material-ui/core'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    const date = new Date()\n    const today = date.toISOString().split('T')\n    const time = today[1].split(':')\n    const todayTime = `${today[0]}T${time[0]}:${time[1]}`\n\n    this.state = {\n      todayTime: todayTime,\n      targetTime: '2020-05-10T13:37',\n      includeTime: false,\n      dynamic: false\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <form noValidate>\n          <TextField\n            id=\"datetime-local\"\n            label=\"From\"\n            type=\"datetime-local\"\n            InputProps={{inputProps: { max: this.state.todayTime} }}\n            value={this.state.targetTime}\n            onChange={e => this.setState({targetTime: e.target.value})}\n          />\n        </form>\n\n        <label>Should be dynamic</label>\n        <Switch \n          checked={this.state.dynamic}\n          onChange={e => this.setState({dynamic: e.target.checked})}\n        />\n\n        <br />\n        \n        <label>Show time</label>\n        <Switch \n          checked={this.state.includeTime}\n          onChange={e => this.setState({includeTime: e.target.checked})}\n        />\n\n        <div id=\"fake-article\">\n          <h2>Space, the final frontier.</h2>\n          <p>\n            These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before. Many say exploration is part of our destiny, but it’s actually our duty to future generations and their quest to ensure the survival of the human species.\n          </p>\n        </div>\n\n        <Time \n          targetTime={this.state.targetTime}\n          includeTime={this.state.includeTime}\n          dynamic={this.state.dynamic}\n        />\n      </div>\n    );\n  }\n\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}